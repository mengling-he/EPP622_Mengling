geom_point() +
geom_vline(xintercept = 5000, linetype="dotted",
color = "blue", size=1.5) +
labs(x =  bquote(paste("ADH (base 10", degree, " C)"))) +
theme_bw()
#tiff(here::here("Mason_SoilMicrobe-PMI_PLoS_2024/figures/samples_by_donor_5000ADH.tiff"), units = "in", width = 7.5, height = 5.5, res = 300)
dist
tiff(here::here("PMI/figures/samples_by_donor_5000ADH.tiff"), units = "in", width = 7.5, height = 5.5, res = 300)
dist
dev.off()
sum(df_sample$ADH_10_actual < 25000)
sum(df_sample$ADH_10_actual > 25000)
sum(df_sample$ADH_10_actual > 2500)
sum(df_sample$ADH_10_actual < 2500)
View(bact.n.order)
#Questions:
#does PMI estimation accuracy change based on taxonomy level?
#does bact + fungi together result in more accurate PMI est?
#does the inclusion of environmental data results in more accurate PMI est?
#does OTUs vs ASVs matter?
set.seed(6)
library(readxl)
library(here)
library(phyloseq)
library(tidyverse)
library(writexl)
######################################
######## load metadata ###############
######################################
treatments <- read_excel(here("PMI/rawdata/treatments_pub.xlsx"))
treatments$ADH=as.numeric(treatments$ADH)
treatments$Type=as.factor(treatments$Type)
treatments$Trt=as.factor(treatments$Trt)
treatments$Sample_Type=as.factor(treatments$Sample_Type)
treatments$Timepoint=as.factor(treatments$Timepoint)
treatments$Season=as.factor(treatments$Season)
treatments$Sector=as.factor(treatments$Sector)
treatments$Sex=as.factor(treatments$Sex)
treatments$BMI_level = factor(treatments$BMI_level, ordered = TRUE, levels = c("Underweight","Normal","Overweight","Obese"))
TOXdata = read_excel(here("PMI/rawdata/TOX_data_all_pub.xlsx"), sheet = "Data")
# ("C:/Users/Allison/OneDrive - University of Tennessee/DeBruyn Lab/NIJ_TOX/TOX_data_all.xlsx", sheet = "Compiled")
TOXdata$Diabetes=as.factor(TOXdata$Diabetes)
TOXdata$Cancer=as.factor(TOXdata$Cancer)
TOXdata$Cardio=as.factor(TOXdata$Cardio)
TOXdata$Respiratory=as.factor(TOXdata$Respiratory)
TOXdata$Neuro=as.factor(TOXdata$Neuro)
TOXdata$Pneumonia=as.factor(TOXdata$Pneumonia)
TOXdata = TOXdata %>% select("Sample","Temperature","ADH_10_actual", "Diabetes", "Cancer","Cardio","Respiratory","Neuro","Pneumonia","Gravimetric Moisture","pH","pH_LRR","EC","EC_LRR","BG_avg","BG_LRR","NAG_avg","NAG_LRR","PHOS_avg","PHOS_LRR","LAP_avg", "LAP_LRR","Evolved_CO2","LRR_resp")
colnames(TOXdata)[10] = "moisture"
metadata = treatments %>%
left_join(TOXdata, by = "Sample")
#prep metadata for phyloseq
map=metadata
head(map)
map=sample_data(map) #convert metadata into phyloseq format
rownames(map)=map$group #assign rownames to be group
levels=c("TOX001CON", "TOX001", "TOX001_1500", "TOX001_3000", "TOX001_4500", "TOX001_8000", "TOX001_11500", "TOX001_15500","TOX001DF", "TOX002CON", "TOX002", "TOX002_1500A", "TOX002_1500B", "TOX002_2750", "TOX002_3750","TOX002DF", "TOX003CON", "TOX003", "TOX003_1500", "TOX003_3000", "TOX003_4500","TOX003DF", "TOX004CON", "TOX004", "TOX004_1500", "TOX004_3000", "TOX004_3500","TOX004DF", "TOX005CON", "TOX005", "TOX005_1500", "TOX005_3000", "TOX005_4500", "TOX005_6500", "TOX005_8500","TOX005DF", "TOX006CON", "TOX006", "TOX006_1500", "TOX006_3000", "TOX006_4500","TOX006DF", "TOX007CON", "TOX007", "TOX007_1500", "TOX007_3000", "TOX007_4500", "TOX007_6000","TOX007DF", "TOX008CON", "TOX008", "TOX008_1500", "TOX008_3000", "TOX008_4500", "TOX008_6500","TOX008DF", "TOX009CON", "TOX009", "TOX009_1500", "TOX009_3000", "TOX009_4500","TOX009DF", "TOX010CON", "TOX010", "TOX010_1500", "TOX010_2500", "TOX010_4500", "TOX010_9000", "TOX010_13000", "TOX010_17500", "TOX010DF", "TOX011CON", "TOX011", "TOX011_1500", "TOX011_3000", "TOX011_3500", "TOX011_5500", "TOX011_7000", "TOX012CON", "TOX012", "TOX012_1500", "TOX012_3000", "TOX012_4000", "TOX012_6000","TOX012DF", "TOX013CON", "TOX013", "TOX013_1500", "TOX013_3000", "TOX013_4000", "TOX013_7500", "TOX013DF","TOX015CON","TOX015","TOX015_250","TOX015_500","TOX015_1000","TOX015_1500", "TOX016CON","TOX016","TOX016_500","TOX016_1000","TOX016_1500","TOX016DF","TOX017CON","TOX017","TOX017_1500","TOX017_3000","TOX017_4500","TOX017_8500","TOX017_13000","TOX017_18500","TOX017DF","TOX018CON","TOX018","TOX018_1500","TOX018_2000","TOX018_3000","TOX018_4000", "TOX019CON","TOX019","TOX019_1500","TOX019_3000","TOX019_3500","TOX019_4500","TOX019_5500","TOX019DF","TOX020CON","TOX020","TOX020_1500","TOX020_3500","TOX020_4500","TOX020_6000","TOX020DF")
map$group=ordered(map$group, levels=levels)
mothur_data= import_mothur(mothur_shared_file = here("PMI/data/TOX2_16S.shared"), mothur_constaxonomy_file = here("PMI/data/TOX2_16S.taxonomy"))
mothur_data= import_mothur(mothur_shared_file = here("PMI/rawdata/TOX2_16S.shared"), mothur_constaxonomy_file = here("PMI/rawdata/TOX2_16S.taxonomy"))
moth_merge = merge_phyloseq(mothur_data, map) #merge mothurdata with the metadata
## Mothur is an open-source platform for analyzing 16S rRNA gene sequences, commonly used in microbiome research to assess microbial community structure and diversity.
colnames(tax_table(moth_merge)) #print column names of tax file
colnames(tax_table(moth_merge)) = c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus") #rename tax column names
moth_sub=subset_samples(moth_merge, Type == "sample") #remove check samples
moth_soil=subset_samples(moth_merge, Trt == "donor") #remove fluid samples and control soil samples
moth_soil=subset_samples(moth_soil, group != "TOX002_1500A") #remove TOX002-1500
moth_soil=subset_samples(moth_soil, group != "TOX002_1500B") #remove TOX002-1500
min(sample_sums(moth_soil)) #29510
sum(sample_sums(moth_soil)) # a total of 7858040 reads across all samples
bact_phylo = moth_soil
bact_phylo_n=transform_sample_counts(bact_phylo, function(x) {x/sum(x)*10000})#need to do total sum scaling: aka take relative abundance and then multiply by fixed library size of 10,000
bact_phylo_n=prune_taxa(taxa_sums(bact_phylo_n) > 10, bact_phylo_n)#remove normalized OTUs with less than 10 reads across all samples
#note went from 50,720 taxa to 5,195 taxa
bact_phylo_n_5000 = subset_samples(bact_phylo_n, ADH <= 5000)
sum(sample_sums(bact_phylo_n_5000)) # a total of 745467.8 reads across all samples <= 5000 ADH
sample_data(bact_phylo_n_5000)$Sample_Type
#mean number of timepoints per donor # there are 19 donor with 78 samples with 745467.8 reads
sample_data(bact_phylo_n_5000) %>%
data.frame()%>%
count(Donor) %>%
summarise(mean_timepoints = mean(n)) %>%
pull(mean_timepoints)
bact_OTU_n=as(otu_table(bact_phylo_n), "matrix")
if(taxa_are_rows(bact_phylo_n)){bact_OTU_n=t(bact_OTU_n)}
bact_OTU_n_df=as.data.frame(bact_OTU_n)
bact_OTU_n_df$group = row.names(bact_OTU_n_df)
bact.n_meta_otu = metadata %>% left_join(bact_OTU_n_df, by = "group")%>%filter(Otu00001 != "NA")
bact.n_OTU_tax_table = as.data.frame(tax_table(bact_phylo_n))
bact.n_OTU_tax_table$OTU = row.names(bact.n_OTU_tax_table) #make a new row names "OTU" with otu names
View(bact.n_meta_otu)
View(bact.n.otu)
View(bact.n_OTU_tax_table)
##### OTU level - remove singletons and doubletons
bact_phylo_prune = prune_taxa(taxa_sums(bact_phylo) > 2, bact_phylo)
bact_phylo_prune # this removed 26585 taxa
bact_phylo_prune_n = transform_sample_counts(bact_phylo_prune, function(x) {x/sum(x)*10000})#need to do total sum scaling: aka take relative abundance and then multiply by fixed library size of 10,000
bact_phylo_prune_n = prune_taxa(taxa_sums(bact_phylo_prune_n) > 10, bact_phylo_prune_n)#remove normalized OTUs with less than 10 reads across all samples
#note went from 24135 taxa to 5,205 taxa
bact_OTU_prune_n = as(otu_table(bact_phylo_prune_n), "matrix")
if(taxa_are_rows(bact_phylo_prune_n)){bact_OTU_prune_n = t(bact_OTU_prune_n)}
bact_OTU_prune_n_df = as.data.frame(bact_OTU_prune_n)
bact_OTU_prune_n_df$group = row.names(bact_OTU_prune_n_df)
bact.prune.n_meta_otu = metadata %>% left_join(bact_OTU_prune_n_df, by = "group") %>% filter(Otu00001 != "NA")
bact.prune.n_OTU_tax_table = as.data.frame(tax_table(bact_phylo_prune_n))
bact.prune.n_OTU_tax_table$OTU = row.names(bact.prune.n_OTU_tax_table) #make a new row names "OTU" with otu names
bact_phylum = bact_phylo %>%
tax_glom(taxrank="Phylum")
bact_phylum_n=transform_sample_counts(bact_phylum, function(x) {x/sum(x)*10000})
bact_phylum_n=prune_taxa(taxa_sums(bact_phylum_n) > 10, bact_phylum_n)
#note: went from 46 to 35 taxa
bact_phylum_n_5000 = prune_samples(ADH <= 5000, bact_phylum_n)
bact_phylum_n_table=as(otu_table(bact_phylum_n), "matrix")
if(taxa_are_rows(bact_phylum_n)){bact_phylum_n_table=t(bact_phylum_n_table)}
bact_phylum_n_df=as.data.frame(bact_phylum_n_table)
bact_phylum_n_df$group = row.names(bact_phylum_n_df)
bact.n_meta_p = metadata %>% left_join(bact_phylum_n_df, by = "group")%>%filter(Otu00002 != "NA")
bact.n_p_tax_table = as.data.frame(tax_table(bact_phylum_n))
bact.n_p_tax_table$OTU = row.names(bact.n_p_tax_table) #make a new row names "OTU" with otu names
View(bact.n_meta_p)
View(bact_phylum_n_table)
bact_phylum_n
otu_table(bact_phylum_n)
bact_phylum
otu_table()
otu_table(bact_phylum)
bact_phylo
head(tax_table(bact_phylum))
bact_phylum
tax_table(bact_phylum_n)
bact.n_meta_p
View(bact.n_meta_p)
View(df_sample)
View(bact.n_OTU_tax_table)
colnames(df_list_5000$bact.n.otu)
n_features
############################################################################
#########Filter samples and Merge the corresponding filtered 16S and ITS datasets
###########################################################################
library(readxl)
library(here)
library(tidyverse)
#######Read the data (didn't consider the prune OTU dataset here)------------------
bact.n.otu = read_xlsx(here("PMI/data/TOX2_16S_TSS_meta_OTUtable.xlsx"))
bact.n.class = read_xlsx(here("PMI/data/TOX2_16S_TSS_meta_Class_table.xlsx"))
bact.n.order = read_xlsx(here("PMI/data/TOX2_16S_TSS_meta_Order_table.xlsx"))
bact.n.phylum = read_xlsx(here("PMI/data/TOX2_16S_TSS_meta_Phylum_table.xlsx"))
ITS.n.otu = read_xlsx(here("PMI/data/TOX2_ITS_TSS_meta_OTU_table.xlsx"))
ITS.n.class = read_xlsx(here("PMI/data/TOX2_ITS_TSS_meta_Class_table.xlsx"))
ITS.n.order = read_xlsx(here("PMI/data/TOX2_ITS_TSS_meta_Order_table.xlsx"))
ITS.n.phylum = read_xlsx(here("PMI/data/TOX2_ITS_TSS_meta_Phylum_table.xlsx"))
View(bact.n.otu)
View(bact.n.order)
list_of_df <- list(bact.n.otu, bact.n.class, bact.n.order, bact.n.phylum, ITS.n.otu, ITS.n.class, ITS.n.order, ITS.n.phylum)
names(list_of_df) <- c("bact.n.otu", "bact.n.class", "bact.n.order", "bact.n.phylum", "ITS.n.otu", "ITS.n.class", "ITS.n.order", "ITS.n.phylum")
?map_df
View(list_of_df)
n_features <- list_of_df %>% map_df(get_n_features)
View(n_features)
View(n_features)
n_features
filter_AHD10 <- function(df, adh_cutoff) {
df_filter <- df %>% filter(ADH_10_actual < adh_cutoff)
return(df_filter)
}
df_list_5000 <- list_of_df %>% map(filter_AHD10, 5000)
n_features <- df_list_5000 %>% map_df(get_n_features)
n_features
?mapply(function, ...)
?map
merged_df_5000 <- merge_list %>% map(merge_16S_ITS_df, df_list_5000)
merged_df_5000 %>% map_df(get_n_features)
df_list_5000 <- append(df_list_5000, merged_df_5000, after = length(df_list_5000))
n_features <- df_list_5000 %>% map_df(get_n_features)
df_list_5000
View(df_list_5000)
colnames(bact.n.phylum)
colnames(bact.n.otu)
bact.otu.tax = read_xlsx(here("PMI/data/TOX2_16S_TSS_OTU_taxtable.xlsx"))
bact.phylum.tax = read_xlsx(here("PMI/data/TOX2_16S_TSS_Phylum_taxtable.xlsx"))
View(bact.otu.tax)
View(bact.phylum.tax)
View(bact.n.otu)
n_features
colnames(bact.n.otu)
colnames(bact.n.phylum)
bact.phylum.tax$OTU
colnames(ITS.n.otu)
bact_OTU_subset_phylum = bact.otu.tax[bact.otu.tax$OTU==bact.phylum.tax$OTU,'Phylum']
bact_OTU_subset_phylum <- subset(bact.otu.tax, OTU %in% bact.phylum.tax$OTU)$Phylum
bact.phylum.tax$Phylum
bact_OTU_subset_phylum
bact.n.otu$Otu06070
bact.phylum.tax$Phylum
bact.phylum.tax$OTU
View(bact.n.otu)
View(bact.otu.tax)
bact.otu.tax$OTU
TSS.otu.tax = read_xlsx(here("PMI/data/TOX2_ITS_TSS_OTU_taxtable.xlsx"))
View(TSS.otu.tax)
library(dplyr)
rename_Phylum_fun <-  function(df,mapping_df) {
mapping_vector <- setNames(mapping_df$Phylum, mapping_df$OTU)
df <- df %>% rename(all_of(mapping_vector))
return(df)
}
colnames(bact.n.phylum)
df_phylumnames_test <- rename_Phylum_fun(bact.n.phylum,bact.otu.tax)
rename_Phylum_fun <-  function(df,mapping_df) {
mapping_vector <- setNames(mapping_df$OTU, mapping_df$Phylum)
df <- df %>% rename(all_of(mapping_vector))
return(df)
}
colnames(bact.n.phylum)
df_phylumnames_test <- rename_Phylum_fun(bact.n.phylum,bact.otu.tax)
View(bact.n.phylum)
colnames(bact.n.phylum)
bact.otu.tax$Phylum
bact.otu.tax$OTU
?all_of
?setNames
mapping_vector_test <- setNames(bact.otu.tax$OTU, bact.otu.tax$Phylum)
mapping_vector_test
mapping_vector_test <- setNames(bact.otu.tax$Phylum, bact.otu.tax$OTU)
bact.n.phylum_rename_test <- bact.n.phylum %>% rename(all_of(mapping_vector_test))
mapping_vector_test[names(mapping_vector_test) %in% colnames(bact.n.phylum)]
bact.n.phylum_rename_test <- bact.n.phylum %>% rename(all_of(mapping_vector_test))
names(mapping_vector_test)
mapping_vector_test <- setNames(bact.otu.tax$Phylum, bact.otu.tax$OTU)
mapping_vector_test[names(mapping_vector_test) %in% colnames(bact.n.phylum)]
mapping_vector_test <- mapping_vector_test[names(mapping_vector_test) %in% colnames(bact.n.phylum)]
bact.n.phylum_rename_test <- bact.n.phylum %>% rename(all_of(mapping_vector_test))
mapping_vector_test
?rename
mapping_vector_test <- setNames(bact.otu.tax$Phylum, bact.otu.tax$OTU)
bact.n.phylum_rename_test <- bact.n.phylum %>% rename(any_of(mapping_vector_test))
View(bact.n.phylum_rename_test)
mapping_vector_test <- setNames(bact.otu.tax$OTU, bact.otu.tax$Phylum)
bact.n.phylum_rename_test <- bact.n.phylum %>% rename(any_of(mapping_vector_test))
View(bact.n.phylum_rename_test)
colnames(bact.n.phylum_rename_test)
bact.phylum.tax = read_xlsx(here("PMI/data/TOX2_16S_TSS_phylum_taxtable.xlsx"))
bact.phylum.tax$Phylum
colnames(bact.n.phylum_rename_test)[45:]
colnames(bact.n.phylum_rename_test)[45:79]
bact.phylum.tax$Phylum
mapping_vector_test <- setNames(bact.phylum.tax$OTU, bact.phylum.tax$Phylum)
bact.n.phylum_rename_test <- bact.n.phylum %>% rename(any_of(mapping_vector_test))
colnames(bact.n.phylum_rename_test)[45:79]
rename_tax_fun <- function(df, mapping_df, tax) {
# Ensure the target_column exists in mapping_df
if (!tax %in% colnames(mapping_df)) {
stop("The specified target column does not exist in the mapping data frame.")
}
# Create the mapping vector using the specified column
mapping_vector <- setNames(mapping_df$OTU,mapping_df[[target_column]])
# Rename the columns in df using dplyr
df <- df %>% rename(any_of(mapping_vector))
return(df)
}
df_phylumnames_test <- rename_tax_fun(bact.n.phylum,bact.phylum.tax,'Phylum')
rename_tax_fun <- function(df, mapping_df, tax) {
# Ensure the target_column exists in mapping_df
if (!tax %in% colnames(mapping_df)) {
stop("The specified target column does not exist in the mapping data frame.")
}
# Create the mapping vector using the specified column
mapping_vector <- setNames(mapping_df$OTU,mapping_df[[tax]])
# Rename the columns in df using dplyr
df <- df %>% rename(any_of(mapping_vector))
return(df)
}
df_phylumnames_test <- rename_tax_fun(bact.n.phylum,bact.phylum.tax,'Phylum')
colnames(df_phylumnames_test)
colnames(df_phylumnames_test)[45:79]
colnames(df_phylumnames_test)[45:79]==bact.phylum.tax$Phylum
bact.class.tax = read_xlsx(here("PMI/data/TOX2_16S_TSS_Class_taxtable.xlsx"))
bact.order.tax = read_xlsx(here("PMI/data/TOX2_16S_TSS_Order_taxtable.xlsx"))
bact.phylum.tax = read_xlsx(here("PMI/data/TOX2_16S_TSS_Phylum_taxtable.xlsx"))
TSS.otu.tax = read_xlsx(here("PMI/data/TOX2_ITS_TSS_OTU_taxtable.xlsx"))
TSS.class.tax = read_xlsx(here("PMI/data/TOX2_ITS_TSS_Class_taxtable.xlsx"))
TSS.order.tax = read_xlsx(here("PMI/data/TOX2_ITS_TSS_Order_taxtable.xlsx"))
TSS.phylum.tax = read_xlsx(here("PMI/data/TOX2_ITS_TSS_Phylum_taxtable.xlsx"))
bact.n.class = rename_tax_fun(bact.n.class,bact.class.tax,'Class')
bact.n.order = rename_tax_fun(bact.n.order,bact.order.tax,'Order')
bact.n.phylum = rename_tax_fun(bact.n.phylum,bact.phylum.tax,'Phylum')
bact.n.phylum  <-  rename_tax_fun(bact.n.phylum,bact.phylum.tax,'Phylum')
View(bact.n.order)
View(bact.order.tax)
bact.n.class <- rename_tax_fun(bact.n.class,bact.class.tax,'Class')
mapping_vector <- setNames(bact.class.tax$OTU,bact.class.tax[['Class']])
mapping_vector
duplicate_names <- mapping_vector[duplicated(mapping_vector)]
print(duplicate_names)
bact.n.class %>% rename(any_of(mapping_vector))
mapping_vector[60]
mapping_vector[107]
rename_tax_fun <- function(df, mapping_df, tax) {
# Ensure the target_column exists in mapping_df
if (!tax %in% colnames(mapping_df)) {
stop("The specified target column does not exist in the mapping data frame.")
}
# Create the mapping vector using the specified column
mapping_vector <- setNames(mapping_df[[tax]],mapping_df$OTU)
# Rename the columns in df using dplyr
df <- df %>% rename(any_of(mapping_vector))
return(df)
}
bact.n.phylum  <-  rename_tax_fun(bact.n.phylum,bact.phylum.tax,'Phylum')
bact.n.phylum = read_xlsx(here("PMI/data/TOX2_16S_TSS_meta_Phylum_table.xlsx"))
bact.n.phylum  <-  rename_tax_fun(bact.n.phylum,bact.phylum.tax,'Phylum')
View(bact.n.phylum)
rename_tax_fun <- function(df, mapping_df, tax) {
# Ensure the target_column exists in mapping_df
if (!tax %in% colnames(mapping_df)) {
stop("The specified target column does not exist in the mapping data frame.")
}
# Create the mapping vector using the specified column
mapping_vector <- setNames(mapping_df$OTU,mapping_df[[tax]])
# Rename the columns in df using dplyr
df <- df %>% rename(any_of(mapping_vector))
return(df)
}
bact.n.phylum = read_xlsx(here("PMI/data/TOX2_16S_TSS_meta_Phylum_table.xlsx"))
bact.n.phylum  <-  rename_tax_fun(bact.n.phylum,bact.phylum.tax,'Phylum')
View(bact.n.phylum)
bact.n.order  <-  rename_tax_fun(bact.n.order,bact.order.tax,'Order')
ITS.n.class = rename_tax_fun(ITS.n.class,TSS.class.tax,'Class')
ITS.n.order = rename_tax_fun(ITS.n.order,TSS.order.tax,'Order')
ITS.n.phylum = rename_tax_fun(ITS.n.phylum,TSS.phylum.tax,'Phylum')
mapping_vector <- setNames(bact.class.tax$OTU,bact.class.tax[['Class']])
mapping_vector <- setNames(bact.n.order$OTU,bact.n.order[['Order']])
mapping_vector <- setNames(bact.order.tax$OTU,bact.order.tax[['Order']])
bact.n.order %>% rename(any_of(mapping_vector))
mapping_vector
# Make the new names unique by appending suffixes to duplicates
unique_mapping_vector <- make.unique(names(mapping_vector))
# Update the mapping vector with unique names
names(mapping_vector) <- unique_mapping_vector
bact.n.order %>% rename(any_of(mapping_vector))
mapping_vector
mapping_vector[31]
mapping_vector[109]
mapping_vector[114]
bact.n.order  <-  rename_tax_fun(bact.n.order,bact.order.tax,'Order')
mapping_vector <- setNames(bact.order.tax$OTU,bact.order.tax[['Order']])
# Make the new names unique by appending suffixes to duplicates
unique_mapping_vector <- make.unique(names(mapping_vector))
# Update the mapping vector with unique names
names(mapping_vector) <- unique_mapping_vector
mapping_vector
unique_mapping_vector
# Update the mapping vector with unique names
names(mapping_vector) <- unique_mapping_vector
mapping_vector[31]
mapping_vector[109]
mapping_vector[114]
bact.n.order <- bact.n.order %>% rename(any_of(mapping_vector))
colnames(bact.n.order)
n_features
library(readxl)
library(here)
library(tidyverse)
library(dplyr)
#######Read the data (didn't consider the prune OTU dataset here)------------------
bact.n.otu = read_xlsx(here("PMI/data/TOX2_16S_TSS_meta_OTUtable.xlsx"))
bact.n.class = read_xlsx(here("PMI/data/TOX2_16S_TSS_meta_Class_table.xlsx"))
bact.n.order = read_xlsx(here("PMI/data/TOX2_16S_TSS_meta_Order_table.xlsx"))
bact.n.phylum = read_xlsx(here("PMI/data/TOX2_16S_TSS_meta_Phylum_table.xlsx"))
ITS.n.otu = read_xlsx(here("PMI/data/TOX2_ITS_TSS_meta_OTU_table.xlsx"))
ITS.n.class = read_xlsx(here("PMI/data/TOX2_ITS_TSS_meta_Class_table.xlsx"))
ITS.n.order = read_xlsx(here("PMI/data/TOX2_ITS_TSS_meta_Order_table.xlsx"))
ITS.n.phylum = read_xlsx(here("PMI/data/TOX2_ITS_TSS_meta_Phylum_table.xlsx"))
#######Rename feature names based on taxtable-------------------------
bact.otu.tax = read_xlsx(here("PMI/data/TOX2_16S_TSS_OTU_taxtable.xlsx"))
bact.class.tax = read_xlsx(here("PMI/data/TOX2_16S_TSS_Class_taxtable.xlsx"))
bact.order.tax = read_xlsx(here("PMI/data/TOX2_16S_TSS_Order_taxtable.xlsx"))
bact.phylum.tax = read_xlsx(here("PMI/data/TOX2_16S_TSS_Phylum_taxtable.xlsx"))
TSS.otu.tax = read_xlsx(here("PMI/data/TOX2_ITS_TSS_OTU_taxtable.xlsx"))
TSS.class.tax = read_xlsx(here("PMI/data/TOX2_ITS_TSS_Class_taxtable.xlsx"))
TSS.order.tax = read_xlsx(here("PMI/data/TOX2_ITS_TSS_Order_taxtable.xlsx"))
TSS.phylum.tax = read_xlsx(here("PMI/data/TOX2_ITS_TSS_Phylum_taxtable.xlsx"))
# rename colnames of bact.n.class, bact.n.order, bact.n.phylum,
rename_tax_fun <- function(df, mapping_df, tax) {
# Ensure the target_column exists in mapping_df
if (!tax %in% colnames(mapping_df)) {
stop("The specified target column does not exist in the mapping data frame.")
}
# Create the mapping vector using the specified column
mapping_vector <- setNames(mapping_df$OTU,mapping_df[[tax]])
# Make the new names unique by appending suffixes to duplicates
unique_mapping_vector <- make.unique(names(mapping_vector))
# Update the mapping vector with unique names
names(mapping_vector) <- unique_mapping_vector
# Rename the columns in df using dplyr
df <- df %>% rename(any_of(mapping_vector))
return(df)
}
bact.n.class <- rename_tax_fun(bact.n.class,bact.class.tax,'Class')
bact.n.order <- rename_tax_fun(bact.n.order,bact.order.tax,'Order')
bact.n.phylum  <-  rename_tax_fun(bact.n.phylum,bact.phylum.tax,'Phylum')
ITS.n.class = rename_tax_fun(ITS.n.class,TSS.class.tax,'Class')
ITS.n.order = rename_tax_fun(ITS.n.order,TSS.order.tax,'Order')
ITS.n.phylum = rename_tax_fun(ITS.n.phylum,TSS.phylum.tax,'Phylum')
list_of_df <- list(bact.n.otu, bact.n.class, bact.n.order, bact.n.phylum, ITS.n.otu, ITS.n.class, ITS.n.order, ITS.n.phylum)
names(list_of_df) <- c("bact.n.otu", "bact.n.class", "bact.n.order", "bact.n.phylum", "ITS.n.otu", "ITS.n.class", "ITS.n.order", "ITS.n.phylum")
# calculat the number of features(Otu,ITS) in each dataframe
get_n_features <- function(df) {
n_features <- df %>%
select(matches(c("Otu", "ITS"))) %>%
summarise(features = ncol(.)) %>%
pull()
return(n_features)
}
n_features <- list_of_df %>% map_df(get_n_features)
n_features
filter_AHD10 <- function(df, adh_cutoff) {
df_filter <- df %>% filter(ADH_10_actual < adh_cutoff)
return(df_filter)
}
df_list_5000 <- list_of_df %>% map(filter_AHD10, 5000)
merge_16S_ITS_df <- function(bact_its_pair, df_list) {
bact_df_name <- as.character(bact_its_pair[1])
its_df_name <- as.character(bact_its_pair[2])
ITS_df_sub <- df_list[[its_df_name]] %>% select(-Sample , -Type,-Donor,-Trt,-Sample_Type,-ADH,-Actual_ADH,-Timepoint,-Per_ADH,-Total_ADH,-Total_Days,-Season,-Samp_Season,-Sector,-Age,-Sex,-Stature,-Weight,-BMI,-BMI_level,-Temperature,-ADH_10_actual,-Diabetes,-Cancer,-Cardio,-Respiratory,-Neuro,-Pneumonia,-moisture,-pH,-pH_LRR,-EC,-EC_LRR,-BG_avg,-BG_LRR,-NAG_avg,-NAG_LRR,-PHOS_avg,-PHOS_LRR,-LAP_avg,-LAP_LRR,-Evolved_CO2,-LRR_resp)
merged_df <- df_list[[bact_df_name]] %>% left_join(ITS_df_sub, by = "group")
return(merged_df)
}
merge_list <- list("bact.ITS.n.otu" = c("bact.n.otu", "ITS.n.otu"),
"bact.ITS.n.phylum" = c("bact.n.phylum", "ITS.n.phylum"),
"bact.ITS.n.class" = c("bact.n.class", "ITS.n.class"),
"bact.ITS.n.order" = c("bact.n.order", "ITS.n.order"))
merged_df_5000 <- merge_list %>% map(merge_16S_ITS_df, df_list_5000)
#######combie bact,ITS and merged dataframe-----------------------
df_list_5000 <- append(df_list_5000, merged_df_5000, after = length(df_list_5000))
#n_features <- df_list_5000 %>% map_df(get_n_features)
df_list_5000
colnames(df_list_5000$bact.n.otu)
colnames(df_list_5000$bact.n.class)
for (i in 1:length(df_list_5000_noenv)) {
print(paste0("data_final/", names(df_list_5000_noenv)[[i]], ".noenv.csv")
)
print(dim(df_list_5000_noenv[[i]]))
}
####### No env: keep only observations from donor assigned to the training set and the response variable-------
filter_noenv <- function(df) {
df_filtered <- df %>% select(-group,-Sample,-Type,-Donor,-Trt,-Sample_Type,-ADH,-Actual_ADH,
-Timepoint,-Per_ADH,-Total_ADH,-Total_Days,-Season,-Samp_Season,
-Sector,-Age,-Sex,-Stature,-Weight,-BMI,-BMI_level,-Temperature,
-Diabetes,-Cancer,-Cardio,-Respiratory,-Neuro,-Pneumonia,-moisture,
-pH,-pH_LRR,-EC,-EC_LRR,-BG_avg,-BG_LRR,-NAG_avg,-NAG_LRR,-PHOS_avg,
-PHOS_LRR,-LAP_avg,-LAP_LRR,-Evolved_CO2,-LRR_resp)
return(df_filtered)
}
####### env:Keep response variable (ADH_actual) and numeric environmental data-------------------
filter_yesenv <- function(df) {
df_filtered <- df %>% select(-group,-Sample,-Type,-Donor,-Trt,-Sample_Type,-ADH,-Actual_ADH,
-Timepoint,-Per_ADH,-Total_ADH,-Total_Days,-Season,-Samp_Season,
-Sector,-Age,-Sex,-Stature,-Weight, -BMI, -BMI_level,
-Diabetes,-Cancer,-Cardio,-Respiratory,-Neuro,-Pneumonia,
-pH,-EC,-BG_avg,-NAG_avg,-PHOS_avg,-LAP_avg,-Evolved_CO2,-LRR_resp)
return(df_filtered)
}
df_list_5000_noenv <- lapply(df_list_5000, filter_noenv)
df_list_5000_env <- lapply(df_list_5000, filter_yesenv)
for (i in 1:length(df_list_5000_noenv)) {
print(paste0("data_final/", names(df_list_5000_noenv)[[i]], ".noenv.csv")
)
print(dim(df_list_5000_noenv[[i]]))
}
#######save the data: without env variables and with env variables
for (i in 1:length(df_list_5000_noenv)) {
write.csv(df_list_5000_noenv[[i]], paste0(here("SelectMicro_24new/Data/PMI/"), names(df_list_5000_noenv)[[i]], ".noenv.csv"), row.names = FALSE)
}
for (i in 1:length(df_list_5000_env)) {
write.csv(df_list_5000_env[[i]], paste0(here("SelectMicro_24new/Data/PMI/"), names(df_list_5000_env)[[i]], ".env.csv"), row.names = FALSE)
}
View(df_list_5000_env)
for (i in 1:length(df_list_5000_noenv)) {
write.csv(df_list_5000_noenv[[i]], paste0(here("SelectMicro_24new/Data/PMI/"), names(df_list_5000_noenv)[[i]], ".noenv.csv"), row.names = FALSE)
}
for (i in 1:length(df_list_5000_env)) {
write.csv(df_list_5000_env[[i]], paste0(here("SelectMicro_24new/Data/PMI/"), names(df_list_5000_env)[[i]], ".env.csv"), row.names = FALSE)
}
df_sample <-  df_list_5000_noenv[[1]]
View(df_sample)
df_list_5000_noenv <- lapply(df_list_5000, filter_noenv)
df_list_5000_env <- lapply(df_list_5000, filter_yesenv)
for (i in 1:length(df_list_5000_noenv)) {
print(paste0("data_final/", names(df_list_5000_noenv)[[i]], ".noenv.csv")
)
}
#######save the data: without env variables and with env variables
for (i in 1:length(df_list_5000_noenv)) {
write.csv(df_list_5000_noenv[[i]], paste0(here("SelectMicro_24new/Data/PMI/"), names(df_list_5000_noenv)[[i]], ".noenv.csv"), row.names = FALSE)
}
for (i in 1:length(df_list_5000_env)) {
write.csv(df_list_5000_env[[i]], paste0(here("SelectMicro_24new/Data/PMI/"), names(df_list_5000_env)[[i]], ".env.csv"), row.names = FALSE)
}
df_sample <-  df_list_5000_noenv[[1]]
df_sample_env <- df_list_5000_env[[1]]
View(df_sample)
df_sample <-  df_list_5000_noenv[[2]]
View(df_sample)
df_sample <-  df_list_5000_noenv[[4]]
View(df_sample)
for (i in 1:length(df_list_5000_noenv)) {
write.csv(df_list_5000_noenv[[i]], paste0(here("SelectMicro_24new/Data/PMI/"), names(df_list_5000_noenv)[[i]], ".noenv.csv"), row.names = FALSE)
}
for (i in 1:length(df_list_5000_env)) {
write.csv(df_list_5000_env[[i]], paste0(here("SelectMicro_24new/Data/PMI/"), names(df_list_5000_env)[[i]], ".env.csv"), row.names = FALSE)
}
